/*
 version: 
*/

/** Indicates this is a C# type. */
declare type CsType = {
#foreach($item in $definition)
$item;
#end
}
declare interface Ref<T> {
    value: T;
}
declare var Ref: new <T>(value: T) => Ref<T>;

/** Represents an array type in C#. */
interface CsArray<T> {
    get LongLength(): long;
    get IsFixedSize(): boolean;
    get IsReadOnly(): boolean;
    get IsSynchronized(): boolean;
    get SyncRoot(): Object;
    get Length(): int;
    get Rank(): int;
    CopyTo(array: CsArray<T>, index: int): void;
    Clone(): Object;
    CopyTo(array: CsArray<T>, index: long): void;
    GetLongLength(dimension: int): long;
    GetValue(index: long): T;
    GetValue(index1: long, index2: long): T;
    GetValue(index1: long, index2: long, index3: long): T;
    GetValue(...indices: long[]): T;
    SetValue(value: T, index: long): void;
    SetValue(value: T, index1: long, index2: long): void;
    SetValue(value: T, index1: long, index2: long, index3: long): void;
    SetValue(value: T, ...indices: long[]): void;
    GetLength(dimension: int): int;
    GetLowerBound(dimension: int): int;
    GetValue(...indices: int[]): T;
    SetValue(value: T, ...indices: int[]): void;
    GetUpperBound(dimension: int): int;
    GetValue(index: int): T;
    GetValue(index1: int, index2: int): T;
    GetValue(index1: int, index2: int, index3: int): T;
    SetValue(value: T, index: int): void;
    SetValue(value: T, index1: int, index2: int): void;
    SetValue(value: T, index1: int, index2: int, index3: int): void;
    Initialize(): void;
}
declare interface CsArrayStatic {
    createCsArray<T1 extends keyof CsType, V extends CsType[T1]>(csType: T1, length: number): CsArray<V>;
    createCsArray<T1 extends keyof CsType, V extends CsType[T1]>(csType: T1, length1: number, length2: number): CsArray<CsArray<V>>;
    createCsArray<T1 extends keyof CsType, V extends CsType[T1]>(csType: T1, length1: number, length2: number, length3: number): CsArray<CsArray<CsArray<V>>>;
    /** Converts a JS array to a C# array of the specified type. */
    toCsArray<T1 extends keyof CsType, V extends CsType[T1]>(csType: T1, arr: V[]): CsArray<V>;
}
declare var CsArray: CsArrayStatic;

declare interface ArrayConstructor {
    /** Convert C# arrays to JS arrays. */
    toJsArray<T>(csArr: CsArray<T>): Array<T>;
}

interface Console {
    error(...data: Object[]): void;
    info(...data: Object[]): void;
    log(...data: Object[]): void;
    warn(...data: Object[]): void;
}
declare var console: Console;

## Parameter list, list: collection of parameter objects
#macro(param $list)
#foreach($i in $list)
#if($velocityCount > 1), #end
#if($i.IsParams)...#end
#if($i.Name == 'function' || $i.Name == 'export' || $i.Name == 'class' || $i.Name == 'with' || $i.Name == 'var')_#end
${i.Name}#if($i.HasDefaultValue)?#end
: #if($i.Type.IsRef)Ref<#end${i.Type.GetFormatString($i.IsParams)}#if($i.Type.IsRef)>#end#end
#end

## ----------------------------------------
## Write a function
#foreach($item in $func)
#set($ps = $item.Params)
#set($nspTab = '')
#if($item.TsNamespace != '' || $item.Module != '')#set($nspTab = '    ')#end
#if($item.Module != '')
declare module '${item.Module}' {
#elseif($item.TsNamespace != '')
declare namespace ${item.TsNamespace} {
#end
$item.GetDocument($nspTab)${nspTab}#if($item.Module == '' && $item.TsNamespace == '')declare #end
function ${item.TsName}(#param($ps)): ${item.ReturnType.GetFormatString()};
#if($item.TsNamespace != '' || $item.Module != '')
}
#end
#end

## ----------------------------------------
## Write the enumeration
#foreach($item in $enum)
#set($t = $item.TypeDeclare.RefType)
#set($nspTab = '')
#set($nspTab2 = '    ')
#if($t.TsNamespace != '' || $t.Module != '')#set($nspTab = '    ')#set($nspTab2 = '        ')#end
#if($t.Module != '')
declare module '${t.Module}' {
#elseif($t.TsNamespace != '')
declare namespace ${t.TsNamespace} {
#end
## Enumerated type
$item.GetDocument($nspTab)${nspTab}#if($t.Module == '' && $t.TsNamespace == '')declare #end
type ${t.TsName} = any;
## Enumeration parameter
#if($item.CanInstance)
${nspTab}#if($t.Module == '' && $t.TsNamespace == '')declare #end
interface ${t.TsName}Enum {
#foreach($name in $item.Item)
${nspTab}    readonly ${name}: any,
#end
${nspTab}}
${nspTab}#if($t.Module == '' && $t.TsNamespace == '')declare #end
var ${t.TsName}: ${t.TsName}Enum;
#end
#if($t.TsNamespace != '' || $t.Module != '')
}
#end
########################
## Enumerated instances
#foreach($inst in $item.InstanceList)
#set($it = $inst.TsType)
#set($nspTab = '')
#if($it.TsNamespace != '' || $it.Module != '')#set($nspTab = '    ')#end
#if($it.Module != '')
declare module '${it.Module}' {
#elseif($it.TsNamespace != '')
declare namespace ${it.TsNamespace} {
#end
${nspTab}#if($it.Module == '' && $it.TsNamespace == '')declare #end
var ${inst.GetFormatString()}: ${inst.Type.GetFormatString()};
#if($it.TsNamespace != '' || $it.Module != '')
}
#end
#end
#end

## ----------------------------------------
## Write a class
#foreach($item in $class)
#set($cls = $item)
#set($t = $cls.TypeDeclare.RefType)
#set($nspTab = '')
#set($nspTab2 = '    ')
#if($t.TsNamespace != '' || $t.Module != '')#set($nspTab = '    ')#set($nspTab2 = '        ')#end
#if($t.Module != '')
declare module '${t.Module}' {
#elseif($t.TsNamespace != '')
declare namespace ${t.TsNamespace} {
#end
## The imported class
#foreach($imp in $cls.ImportTypes)
${nspTab}import { ${imp.TsName}, ${imp.TsName}Constructor } from '${imp.Module}'; 
#end
########################
## The write member property
$cls.GetDocument($nspTab)${nspTab}#if($t.Module == '' && $t.TsNamespace == '')declare #end
interface ${t.TsName}${cls.GetClassGenericString()}${cls.GetExtendsString('')} {
## Members of the field
#foreach($field in $item.Fields)
#if(!$field.IsStatic)
$field.GetDocument($nspTab2)${nspTab}    #if($field.IsReadonly)readonly #end${field.Name}: ${field.Type.GetFormatString()};
#end
#end
## Member attribute
#foreach($property in $item.Propertys)
#if(!$property.IsStatic && $property.PropertyType == 'Read')## get
$property.GetDocument($nspTab2)${nspTab}    get ${property.Name}(): ${property.Type.GetFormatString()};
#end
#if(!$property.IsStatic && $property.PropertyType == 'Write')## set
$property.GetDocument($nspTab2)${nspTab}    set ${property.Name}(v: ${property.Type.GetFormatString()});
#end
#end
## Members of the method
#foreach($method in $item.Methods)
#if(!$method.IsStatic)
#set($ps = $method.Params)
#if(!$method.GenericTypes)
$method.GetDocument($nspTab2)${nspTab}    ${method.Name}(${method.GetGenericParamString()}#param($ps)): ${method.ReturnType.GetFormatString()};
#end
#end
#end
${nspTab}}
## This writes the constructor
${nspTab}#if($t.Module == '' && $t.TsNamespace == '')declare #end
interface ${t.TsName}Constructor${cls.GetClassGenericString()} {
## The constructor
#if($cls.CanNew())
#if($cls.IsStruct)
${nspTab}    new(): ${t.TsFullName}${cls.GetClassGenericTypeString()};
#end
#foreach($constructor in $item.Constructors)
#set($ps = $constructor.Params)
$constructor.GetDocument($nspTab2)${nspTab}    new(#param($ps)): ${t.TsFullName}${cls.GetClassGenericTypeString()};
#end
#end
${nspTab}}
## Static attributes
${nspTab}#if($t.Module == '' && $t.TsNamespace == '')declare #end
interface ${t.TsName}Static${cls.GetClassGenericString()}${cls.GetExtendsString('Static')} {
## Static field
#foreach($field in $item.Fields)
#if($field.IsStatic)
#set($f = $field)
$field.GetDocument($nspTab2)${nspTab}    #if($field.IsReadonly)readonly #end${field.Name}: ${field.Type.GetFormatString()};
#end
#end
########################
## Static attributes
#foreach($property in $item.Propertys)
#if($property.IsStatic && $property.PropertyType == 'Read')## get
$property.GetDocument($nspTab2)${nspTab}    get ${property.Name}(): ${property.Type.GetFormatString()};
#end
#if($property.IsStatic && $property.PropertyType == 'Write')## set
$property.GetDocument($nspTab2)${nspTab}    set ${property.Name}(v: ${property.Type.GetFormatString()});
#end
#end
## A static method
#foreach($method in $item.Methods)
#if($method.IsStatic)
#set($ps = $method.Params)
#if(!$method.GenericTypes)
$method.GetDocument($nspTab2)${nspTab}    ${method.Name}(${method.GetGenericParamString()}#param($ps)): ${method.ReturnType.GetFormatString()};
#end
#end
#end
${nspTab}}
#if($cls.CanInstance)
${nspTab}#if($t.Module == '' && $t.TsNamespace == '')declare #end
#set($genericString = $cls.GetGenericString())
var ${t.TsName}: ${t.TsFullName}Constructor${genericString} & ${t.TsFullName}Static${genericString};
#end
#if($t.TsNamespace != '' || $t.Module != '')
}
#end
########################
## Object instance
#foreach($inst in $item.InstanceList)
#set($it = $inst.TsType)
#set($nspTab = '')
#if($it.TsNamespace != '' || $it.Module != '')#set($nspTab = '    ')#end
#if($it.Module != '')
declare module '${it.Module}' {
#elseif($it.TsNamespace != '')
declare namespace ${it.TsNamespace} {
#end
${nspTab}#if($it.Module == '' && $it.TsNamespace == '')declare #end
var ${inst.GetFormatString()}: ${inst.Type.GetFormatString()};
#if($it.TsNamespace != '' || $it.Module != '')
}
#end
#end
#end

## ----------------------------------------
## Custom type
#foreach($item in $cust)
#if(!$item.Ignore)
#set($t = $item.TypeDeclare.RefType)
#set($nspTab = '')
#if($t.TsNamespace != '' || $t.Module != '')#set($nspTab = '    ')#end
#if($t.Module != '')
declare module '${t.Module}' {
#elseif($t.TsNamespace != '')
declare namespace ${t.TsNamespace} {
#end
##
${nspTab}#if($t.Module == '' && $t.TsNamespace == '')declare #end
type ${t.TsName} = ${item.TypeStr};
#if($item.CanInstance)
${nspTab}#if($t.Module == '' && $t.TsNamespace == '')declare #end
var ${t.TsName}: any;
#end
#if($t.TsNamespace != '' || $t.Module != '')
}
#end
#end
########################
## The instance
#foreach($inst in $item.InstanceList)
#set($it = $inst.TsType)
#set($nspTab = '')
#if($it.TsNamespace != '' || $it.Module != '')#set($nspTab = '    ')#end
#if($it.Module != '')
declare module '${it.Module}' {
#elseif($it.TsNamespace != '')
declare namespace ${it.TsNamespace} {
#end
${nspTab}#if($it.Module == '' && $it.TsNamespace == '')declare #end
var ${inst.GetFormatString()}: ${inst.Type.GetFormatString()};
#if($it.TsNamespace != '' || $it.Module != '')
}
#end
#end
#end

## ----------------------------------------
## Reference types
#foreach($item in $ref)
#if($item.Module != '')
declare module '${item.Module}'' {
    type ${item.GetTypeStr()} = any;
}
#elseif($item.TsNamespace != '')
declare namespace $item.TsNamespace {
    type ${item.GetTypeStr()} = any;
}
#else
declare type ${item.GetTypeStr()} = any;
#end
#end